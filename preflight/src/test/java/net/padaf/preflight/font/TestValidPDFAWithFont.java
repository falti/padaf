/*******************************************************************************
 * Copyright 2010 Atos Worldline SAS
 * 
 * Licensed by Atos Worldline SAS under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * Atos Worldline SAS licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.padaf.preflight.font;

import java.io.IOException;

import javax.activation.FileDataSource;

import net.padaf.preflight.AbstractTestValidPDFA;
import net.padaf.preflight.ValidationException;
import net.padaf.preflight.ValidationResult;

import org.junit.Test;
import static org.junit.Assert.*;

public class TestValidPDFAWithFont extends AbstractTestValidPDFA {

  @Test
  /**
   * Check a valid PDF/A-1b using a CIDKeyed Font of Type 2.
   * This font uses a Idenity-H CMap.
   */
  public void testCIDFontType2_Identity_H() throws ValidationException,
      IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-cidtype2.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a Font of Type 3.
   */
  public void testType3() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-type3.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a TrueType Font (generated by OpenOffice).
   */
  public void testTrueType() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-truetype-of.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a TrueType Font (generated by iText-2.1.7).
   */
  public void testTrueTypeIText() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-truetype.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a non-symbolic TrueType Font (generated by iText-2.1.7).
   */
  public void testTrueTypeNonSymbolic() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-truetype-nonsymbolic.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a TrueType Fonts (OpenOffice).
   */
  public void test3SymbolicTrueType() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-several-symbolic-ttf.pdf"));
      // if ( !result.isValid() ) {
      // showErrors(result);
      // }
      // Callas le valid mais la police ne contient pas l'un des champs
      // requis d'apres le pdf reference
      assertFalse(result.isValid());
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a Font of Type 1.
   * The Content of this PDF uses :
   * <UL>
   * <li> Two different Font Size
   * <li> Black font color and yellow font color on a red background 
   * </UL>
   */
  public void testType1() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-type1.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  @Test
  /**
   * Check a valid PDF/A-1b using a Font of Type 1 (File generated by itext).
   */
  public void testType1IText() throws ValidationException, IOException {
    if (pdfPath != null) {
      ValidationResult result = validator.validate(new FileDataSource(pdfPath
          + "font/pdfa-with-type1-itext.pdf"));
      if (!result.isValid()) {
        showErrors(result);
      }
		result.closePdf();
    }
  }

  // TODO Validation CIDKeyed Type2 with Non Identity Map
  // TODO Validation CIDKeyed Type0
}
